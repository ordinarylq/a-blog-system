name: Create, publish and deploy a Spring-Boot Docker image

on:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - id: cache-path
        name: Maven Cache Path
        run: |
          echo "dir=$(mvn help:evaluate -Dexpression=settings.localRepository | grep 'm2/repository')" >> $GITHUB_OUTPUT

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.cache-path.outputs.dir }}
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          
      - name: Package with Maven
        run: |
          sudo mvn -B package -DskipTests --file pom.xml
          sudo mkdir -p blog-system-web/target/extracted
          sudo java -Djarmode=layertools -jar blog-system-web/target/*.jar extract --destination blog-system-web/target/extracted

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    environment: azure-linux
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/production.key
          chmod 600 ~/.ssh/production.key
          cat >>~/.ssh/config <<END
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/production.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.AZURE_VM_USERNAME }}
          SSH_KEY: ${{ secrets.AZURE_VM_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.AZURE_VM_HOST }}
      - name: Stop and rename docker container
        run: ssh production 'sudo docker stop a-blog-system && sudo docker rename a-blog-system a-blog-system_bak'
      - name: Remove original image
        run: ssh production 'sudo docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
      - name: Pull latest image
        run: ssh production 'sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
      - name: Run container
        run: ssh production 'sudo docker run -d -p 443:9898 --name a-blog-system --env-file /home/azureuser/a-blog-system/env.list ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
      - name: Remove original container
        run: ssh production 'sudo docker rm a-blog-system_bak'

